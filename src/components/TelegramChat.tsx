'use client'

import { useState, useEffect, useRef } from 'react'
import { Send, Bot, User, Search, MoreVertical, ArrowLeft } from 'lucide-react'

interface Message {
  id: string
  text: string
  isBot: boolean
  timestamp: Date
  buttons?: Array<{
    text: string
    callback_data: string
  }>
}

export function TelegramChat() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 360¬∞ Travel!\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:\n\nüè® –û—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É\n‚úàÔ∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã –æ—Ç –≤–µ–¥—É—â–∏—Ö –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π\nüöó –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\nüí¨ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:',
      isBot: true,
      timestamp: new Date(),
      buttons: [
        { text: 'üè® –û—Ç–µ–ª–∏', callback_data: 'hotels' },
        { text: '‚úàÔ∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã', callback_data: 'flights' },
        { text: 'üöó –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ', callback_data: 'cars' },
        { text: 'üí¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contact' },
        { text: 'üìò –ü—Ä–∞–≤–∏–ª–∞', callback_data: 'rules' }
      ]
    }
  ])
  const [inputText, setInputText] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSendMessage = async () => {
    if (!inputText.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      isBot: false,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputText('')
    setIsTyping(true)

    // Simulate bot response
    setTimeout(() => {
      setIsTyping(false)
      const botResponse = getBotResponse(inputText)
      setMessages(prev => [...prev, botResponse])
    }, 1000 + Math.random() * 2000)
  }

  const handleButtonClick = async (callbackData: string) => {
    const buttonMessage: Message = {
      id: Date.now().toString(),
      text: `–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${callbackData}`,
      isBot: false,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, buttonMessage])
    setIsTyping(true)

    setTimeout(() => {
      setIsTyping(false)
      const botResponse = getButtonResponse(callbackData)
      setMessages(prev => [...prev, botResponse])
    }, 1000)
  }

  const getBotResponse = (text: string): Message => {
    const lowerText = text.toLowerCase()
    
    if (lowerText.includes('/start') || lowerText.includes('—Å—Ç–∞—Ä—Ç')) {
      return {
        id: Date.now().toString(),
        text: 'üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 360¬∞ Travel!\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:\n\nüè® –û—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É\n‚úàÔ∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã –æ—Ç –≤–µ–¥—É—â–∏—Ö –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π\nüöó –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\nüí¨ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:',
        isBot: true,
        timestamp: new Date(),
        buttons: [
          { text: 'üè® –û—Ç–µ–ª–∏', callback_data: 'hotels' },
          { text: '‚úàÔ∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã', callback_data: 'flights' },
          { text: 'üöó –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ', callback_data: 'cars' },
          { text: 'üí¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contact' },
          { text: 'üìò –ü—Ä–∞–≤–∏–ª–∞', callback_data: 'rules' }
        ]
      }
    }

    if (lowerText.includes('/help') || lowerText.includes('–ø–æ–º–æ—â—å')) {
      return {
        id: Date.now().toString(),
        text: '‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\nüè® /hotels - –ü–æ–∏—Å–∫ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª–µ–π\n‚úàÔ∏è /flights - –ü–æ–∏—Å–∫ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤\nüöó /cars - –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\nüí¨ /contact - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\nüìò /rules - –ü—Ä–∞–≤–∏–ª–∞ –∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!',
        isBot: true,
        timestamp: new Date()
      }
    }

    return {
      id: Date.now().toString(),
      text: 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø 360¬∞ Travel Bot - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\nüè® /hotels - –ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π\n‚úàÔ∏è /flights - –ü–æ–∏—Å–∫ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤\nüöó /cars - –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\nüí¨ /contact - –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\nüìò /rules - –ü—Ä–∞–≤–∏–ª–∞ –∏ FAQ\n‚ùì /help - –ü–æ–º–æ—â—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.',
      isBot: true,
      timestamp: new Date()
    }
  }

  const getButtonResponse = (callbackData: string): Message => {
    switch (callbackData) {
      case 'hotels':
        return {
          id: Date.now().toString(),
          text: 'üè® –ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π\n\n–ù–∞–π–¥–∏—Ç–µ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –æ—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É —Å –ª—É—á—à–∏–º–∏ —Ü–µ–Ω–∞–º–∏!\n\nüîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Booking.com –¥–ª—è –ø–æ–∏—Å–∫–∞:\nhttps://www.booking.com\n\nüí° –°–æ–≤–µ—Ç—ã:\n‚Ä¢ –ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è –ª—É—á—à–∏—Ö —Ü–µ–Ω\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –æ—Ç–∑—ã–≤—ã –≥–æ—Å—Ç–µ–π\n‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
          isBot: true,
          timestamp: new Date()
        }
      case 'flights':
        return {
          id: Date.now().toString(),
          text: '‚úàÔ∏è –ü–æ–∏—Å–∫ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤\n\n–°—Ä–∞–≤–Ω–∏—Ç–µ —Ü–µ–Ω—ã –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –æ—Ç —Å–æ—Ç–µ–Ω –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π!\n\nüîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Kayak –¥–ª—è –ø–æ–∏—Å–∫–∞:\nhttps://www.kayak.com\n\nüí° –°–æ–≤–µ—Ç—ã:\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–∏–±–∫–∏–µ –¥–∞—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ü–µ–Ω\n‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–≥–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π',
          isBot: true,
          timestamp: new Date()
        }
      case 'cars':
        return {
          id: Date.now().toString(),
          text: 'üöó –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n\n–ê—Ä–µ–Ω–¥—É–π—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —É –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É!\n\nüîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ RentalCars.com:\nhttps://www.rentalcars.com\n\nüí° –°–æ–≤–µ—Ç—ã:\n‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ü–µ–Ω—ã —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —É—Å–ª–æ–≤–∏—è —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è\n‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ç–æ–ø–ª–∏–≤–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É',
          isBot: true,
          timestamp: new Date()
        }
      case 'contact':
        return {
          id: Date.now().toString(),
          text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n\n–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å –æ—Ç –Ω–∞—à–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤!\n\nüîó –ù–∞—à Telegram –∫–∞–Ω–∞–ª:\nhttps://t.me/travel360net\n\nüìß Email: support@travel360.net\n\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7\n\n–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!',
          isBot: true,
          timestamp: new Date()
        }
      case 'rules':
        return {
          id: Date.now().toString(),
          text: 'üìò –ü—Ä–∞–≤–∏–ª–∞ –∏ FAQ\n\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\nhttps://telegra.ph/360Travel-Rules-and-FAQ-08-01\n\nüìã –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n‚Ä¢ –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã\n‚Ä¢ –ú—ã –Ω–µ –≤–∑–∏–º–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∑–∞ —É—Å–ª—É–≥–∏\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ 24/7\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π',
          isBot: true,
          timestamp: new Date()
        }
      default:
        return {
          id: Date.now().toString(),
          text: '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.',
          isBot: true,
          timestamp: new Date()
        }
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  return (
    <div className="flex h-screen telegram-bg">
      {/* Sidebar */}
      <div className="w-80 telegram-sidebar flex flex-col">
        {/* Header */}
        <div className="p-4 border-b border-border">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center">
              <Bot className="w-6 h-6 text-white" />
            </div>
            <div>
              <h2 className="font-semibold text-white">360¬∞ Travel</h2>
              <p className="text-sm text-muted-foreground">@travel360net_bot</p>
            </div>
          </div>
        </div>

        {/* Search */}
        <div className="p-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫..."
              className="w-full pl-10 pr-4 py-2 bg-card border border-border rounded-lg text-white placeholder-muted-foreground"
            />
          </div>
        </div>

        {/* Chat List */}
        <div className="flex-1 overflow-y-auto">
          <div className="p-4">
            <div className="flex items-center gap-3 p-3 bg-accent rounded-lg cursor-pointer hover:bg-accent/80 transition-colors">
              <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center">
                <Bot className="w-6 h-6 text-white" />
              </div>
              <div className="flex-1">
                <h3 className="font-medium text-white">360¬∞ Travel Bot</h3>
                <p className="text-sm text-muted-foreground">–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö</p>
              </div>
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
            </div>
          </div>
        </div>
      </div>

      {/* Chat Area */}
      <div className="flex-1 flex flex-col telegram-chat">
        {/* Chat Header */}
        <div className="p-4 border-b border-border flex items-center gap-3">
          <button className="p-2 hover:bg-accent rounded-lg transition-colors">
            <ArrowLeft className="w-5 h-5 text-white" />
          </button>
          <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center">
            <Bot className="w-6 h-6 text-white" />
          </div>
          <div className="flex-1">
            <h2 className="font-semibold text-white">360¬∞ Travel</h2>
            <p className="text-sm text-muted-foreground">–æ–Ω–ª–∞–π–Ω</p>
          </div>
          <button className="p-2 hover:bg-accent rounded-lg transition-colors">
            <Search className="w-5 h-5 text-white" />
          </button>
          <button className="p-2 hover:bg-accent rounded-lg transition-colors">
            <MoreVertical className="w-5 h-5 text-white" />
          </button>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.isBot ? 'justify-start' : 'justify-end'} animate-fade-in`}
            >
              <div className={`telegram-message ${!message.isBot ? 'telegram-message-out' : ''}`}>
                <div className="flex items-start gap-2">
                  {message.isBot && (
                    <div className="w-6 h-6 bg-primary rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                      <Bot className="w-3 h-3 text-white" />
                    </div>
                  )}
                  <div className="flex-1">
                    <p className="text-white whitespace-pre-wrap">{message.text}</p>
                    <p className="text-xs text-muted-foreground mt-1">
                      {message.timestamp.toLocaleTimeString('ru-RU', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </p>
                  </div>
                </div>
                
                {message.buttons && (
                  <div className="mt-3 space-y-2">
                    {message.buttons.map((button, index) => (
                      <button
                        key={index}
                        onClick={() => handleButtonClick(button.callback_data)}
                        className="w-full text-left p-2 bg-accent hover:bg-accent/80 rounded-lg transition-colors text-white text-sm"
                      >
                        {button.text}
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="flex justify-start animate-fade-in">
              <div className="telegram-message">
                <div className="flex items-center gap-2">
                  <div className="w-6 h-6 bg-primary rounded-full flex items-center justify-center">
                    <Bot className="w-3 h-3 text-white" />
                  </div>
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-muted-foreground rounded-full animate-typing"></div>
                    <div className="w-2 h-2 bg-muted-foreground rounded-full animate-typing" style={{ animationDelay: '0.2s' }}></div>
                    <div className="w-2 h-2 bg-muted-foreground rounded-full animate-typing" style={{ animationDelay: '0.4s' }}></div>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* Input */}
        <div className="p-4 border-t border-border">
          <div className="flex gap-2">
            <input
              type="text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ..."
              className="flex-1 telegram-input focus:outline-none focus:ring-2 focus:ring-primary"
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputText.trim()}
              className="telegram-button disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Send className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>
    </div>
  )
} 