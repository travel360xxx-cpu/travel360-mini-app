import { NextRequest, NextResponse } from 'next/server'
import TelegramBot from 'node-telegram-bot-api'

const token = process.env.TELEGRAM_BOT_TOKEN || '8381245817:AAEXDwxX2Ygtvw1Idohmppw5Fg_K4g1bET8'
const bot = new TelegramBot(token, { polling: false })

// ID —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID || '123456789'

export async function GET() {
  return NextResponse.json({ 
    status: 'OK', 
    message: 'Submit Request API is working',
    admin_chat_id: ADMIN_CHAT_ID,
    bot_token: token ? 'Set' : 'Not set'
  })
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { service, details, user } = body

    console.log('üì• Received request:', { service, details, user })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!service || !details) {
      console.error('‚ùå Missing required fields:', { service, details })
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' }, 
        { status: 400 }
      )
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const message = `üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${user?.last_name || ''}
üÜî ID: ${user?.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë§ Username: @${user?.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìã –£—Å–ª—É–≥–∞: ${service}
üìù –î–µ—Ç–∞–ª–∏: ${details}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`

    console.log('üì§ Sending message to admin:', ADMIN_CHAT_ID)

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    if (ADMIN_CHAT_ID === '123456789') {
      console.warn('‚ö†Ô∏è ADMIN_CHAT_ID is placeholder, logging message instead')
      console.log('üì® MESSAGE FOR ADMIN:', message)
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–∏
      return NextResponse.json({ 
        success: true, 
        message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)',
        logged_message: message
      })
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å inline keyboard
      await bot.sendMessage(ADMIN_CHAT_ID, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_${user?.id || 'unknown'}` },
              { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${user?.id || 'unknown'}` }
            ],
            [
              { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_${user?.id || 'unknown'}` }
            ]
          ]
        }
      })
    }

    console.log('‚úÖ Message sent successfully')
    return NextResponse.json({ success: true, message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' })
  } catch (error: any) {
    console.error('‚ùå Error submitting request:', error)
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error?.response) {
      console.error('üìã Telegram API error:', error.response.body)
      return NextResponse.json(
        { error: `–û—à–∏–±–∫–∞ Telegram API: ${error.response.body?.description || 'Unknown error'}` }, 
        { status: 500 }
      )
    }
    
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏' }, 
      { status: 500 }
    )
  }
} 